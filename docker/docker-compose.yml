version: "3.8"

networks:
  backend:


services:
  traefik:
    image: traefik:v3.0
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --api.insecure=true
      - --entrypoints.web.address=:80
    ports:
      - "80:80"       # Public HTTP traffic
      - "8080:8080"   # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.http.routers.traefik.rule=Host(`localhost`) && PathPrefix(`/dashboard`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=web"
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"     # AMQP protocol (for apps)
      - "15672:15672"   # RabbitMQ dashboard (browser)
    networks:
      - backend
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest


  auth-service:
    build: ../backend/dotnet-services/AuthenticationService
    volumes:
      - ../backend/dotnet-services/AuthenticationService:/app
    ports:
      - "8001:8085"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - dotnet-db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/auth`)"
      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.services.auth.loadbalancer.server.port=8085"
      - "traefik.http.routers.auth.middlewares=strip-auth@docker"
      - "traefik.http.middlewares.strip-auth.stripprefix.prefixes=/auth"
    networks:
      - backend
    

  order-service:
    build: ../backend/dotnet-services/OrderService
    volumes:
      - ../backend/dotnet-services/OrderService:/app
    ports:
      - "8002:8085"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - dotnet-db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.order.rule=PathPrefix(`/order`)"
      - "traefik.http.routers.order.entrypoints=web"
      - "traefik.http.services.order.loadbalancer.server.port=8085"
      - "traefik.http.routers.order.middlewares=strip-order@docker"
      - "traefik.http.middlewares.strip-order.stripprefix.prefixes=/order"
    networks:
      - backend

  notification-service:
    build: ../backend/springboot-services/notification-service
    volumes:
      - ../backend/springboot-services/notification-service:/app
      - ~/.m2:/root/.m2
    ports:
      - "8003:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_NOTIFICATION_DATASOURCE_URL=${SPRING_NOTIFICATION_DATASOURCE_URL}
      - NOTIFICATION_POSTGRES_USER=${NOTIFICATION_POSTGRES_USER}
      - NOTIFICATION_POSTGRES_PASSWORD=${NOTIFICATION_POSTGRES_PASSWORD}
    depends_on:
      - notification-db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notification.rule=PathPrefix(`/notification`)"
      - "traefik.http.routers.notification.entrypoints=web"
      - "traefik.http.services.notification.loadbalancer.server.port=8080"
      - "traefik.http.routers.notification.middlewares=strip-notification@docker"
      - "traefik.http.middlewares.strip-notification.stripprefix.prefixes=/notification"
    networks:
      - backend

  product-service:
    build: ../backend/springboot-services/product-service
    volumes:
      - ../backend/springboot-services/product-service:/app
      - ~/.m2:/root/.m2
    ports:
      - "8005:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_PRODUCT_DATASOURCE_URL=jdbc:postgresql://product-db:5432/product_db
      - PRODUCT_POSTGRES_USER=product_db
      - PRODUCT_POSTGRES_PASSWORD=product_db
    depends_on:
      - product-db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.product.rule=PathPrefix(`/product`)"
      - "traefik.http.routers.product.entrypoints=web"
      - "traefik.http.services.product.loadbalancer.server.port=8080"
      - "traefik.http.routers.product.middlewares=strip-product@docker"
      - "traefik.http.middlewares.strip-product.stripprefix.prefixes=/product"
    networks:
      - backend

  

  tenant-service:
    build: ../backend/springboot-services/tenant-service
    volumes:
      - ../backend/springboot-services/tenant-service:/app
      - ~/.m2:/root/.m2
    ports:
      - "8004:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - DB_HOST=tenant-db
      - DB_PORT=5432
      - DB_NAME=${TENANT_POSTGRES_DB:-tenant_db}
      - DB_USERNAME=${TENANT_POSTGRES_USER:-postgres}
      - DB_PASSWORD=${TENANT_POSTGRES_PASSWORD:-postgres}
      - SUBSCRIPTION_SERVICE_URL=${SUBSCRIPTION_SERVICE_URL:-http://subscription-service:8080}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL:-http://auth-service:8085}
      - USER_ROLE_SERVICE_URL=${USER_ROLE_SERVICE_URL:-http://auth-service:8085}
      - JWT_SECRET=${JWT_SECRET:-mySecretKey123456789012345678901234567890}
      - JWT_ISSUER=${JWT_ISSUER:-https://localhost:5115}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-https://localhost:5115}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=${RABBITMQ_DEFAULT_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_DEFAULT_PASS:-guest}
      - SECURITY_USER_NAME=admin
      - SECURITY_USER_PASSWORD=admin123
    depends_on:
      - tenant-db
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tenant.rule=PathPrefix(`/tenant`)"
      - "traefik.http.routers.tenant.entrypoints=web"
      - "traefik.http.services.tenant.loadbalancer.server.port=8080"
      - "traefik.http.routers.tenant.middlewares=strip-tenant@docker"
      - "traefik.http.middlewares.strip-tenant.stripprefix.prefixes=/tenant"
    networks:
      - backend

  notification-db:
    image: postgres:14
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${NOTIFICATION_POSTGRES_DB}
      POSTGRES_USER: ${NOTIFICATION_POSTGRES_USER}
      POSTGRES_PASSWORD: ${NOTIFICATION_POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  product-db:
    image: postgres:14
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: product_db
      POSTGRES_USER: product_db
      POSTGRES_PASSWORD: product_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend


  dotnet-db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: dotnet-db
    environment:
      SA_PASSWORD: "YourStrong@Passw0rd"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    networks:
      - backend

  tenant-db:
    image: postgres:14
    ports:
      - "5436:5432"
    environment:
      POSTGRES_DB: tenant_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

volumes:
  frontend_node_modules:
